#!/bin/bash


set -e

# Paths
CONFIG_DIR="$HOME/.config/dotfiles"
DOTFILES_DIR="$HOME/dotfiles"
# DOTFILES_DIR="${HOME}"
IS_FIRST_RUN="$HOME/.dotfiles_first_run"

DOTFILES_REPOSITORY="https://github.com/linux-ricing-project/dotfiles.git"

DOTFILES_VERSION="v1.0"


function show_header(){
clear
cat << "HEADER"
    ____        __  _____ __
   / __ \____  / /_/ __(_) /__  _____
  / / / / __ \/ __/ /_/ / / _ \/ ___/
 / /_/ / /_/ / /_/ __/ / /  __(__  )
/_____/\____/\__/_/ /_/_/\___/____/

HEADER
}

function print_message(){
    local message="$1"

    gum style --bold --foreground="#FFFFFF" "$message"
}

function loading(){
    local title="$1"
    local command="$2"

    gum spin --title="$title" \
      --spinner.foreground="$os_color" -- sh -c "$command"
}

function print_stats(){
  os_pretty_name=$(grep "^PRETTY_NAME=" /etc/os-release | cut -d '=' -f2 | sed 's/"//g')
  dotfiles_stats_file="/tmp/dotfiles-stats.csv"

  echo "Dotfiles,$DOTFILES_VERSION" > "$dotfiles_stats_file"
  echo "Distro Linux,$os_pretty_name" >> "$dotfiles_stats_file"

  gum table --border rounded --print --file "$dotfiles_stats_file"
}

function check_dependencies(){
    if ! type gum >/dev/null 2>&1; then
    gum_version="0.14.4"
    gum_filename="gum_${gum_version}_amd64.deb"

    echo "Installing dependencies: gum"
    wget -q -P /tmp "https://github.com/charmbracelet/gum/releases/download/v${gum_version}/${gum_filename}"
    sudo dpkg -i /tmp/${gum_filename} > /dev/null && rm -rf /tmp/${gum_filename}
fi
}

function ubuntu_setup() {

  test -f /var/lib/apt/lists/lock && sudo rm -rf /var/lib/apt/lists/lock
  test -f /var/cache/apt/archives/lock && sudo rm -rf /var/cache/apt/archives/lock
  test -f /var/lib/dpkg/lock && sudo rm -rf /var/lib/dpkg/lock
  test -f /var/lib/dpkg/lock-frontend && sudo rm -rf /var/lib/dpkg/lock-frontend

  loading "Updating packages..." "sudo apt update && sudo apt -y upgrade"

  if ! dpkg -s git >/dev/null 2>&1; then
    loading "Installing Git" "sudo apt install -y git git-extras"
  fi

  loading "Installing Python3 dependencies" "sudo apt -y install \
        python3 \
        python3-testresources \
        python3-venv \
        python3-pip \
        python3-watchdog"

  if ! dpkg -s ansible >/dev/null 2>&1; then
    loading "Installing Ansible" "sudo apt update && \
      sudo apt install -y software-properties-common && \
      sudo apt-add-repository -y ppa:ansible/ansible && \
      sudo apt update && \
      sudo apt install -y ansible"
  fi

}

function arch_setup() {

  if ! pacman -Q python3 >/dev/null 2>&1; then
    _task "Installing Python3"
    _cmd "sudo pacman -S --noconfirm python3"
  fi

  if ! pacman -Q python-pip >/dev/null 2>&1; then
    _task "Installing Python3 Pip"
    _cmd "sudo pacman -S --noconfirm python-pip"
  fi

  if ! [ -x "$(command -v ansible)" ]; then
    _task "Installing Ansible"
    _cmd "sudo pacman -Sy --noconfirm"
    _cmd "sudo pacman -S --noconfirm ansible"
    _cmd "sudo pacman -S --noconfirm python-argcomplete"
    # _cmd "sudo activate-global-python-argcomplete3"
  fi

  if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    _task "Installing Python3 Watchdog"
    _cmd "sudo pacman -S --noconfirm python-watchdog"
  fi

  if ! pacman -Q openssh >/dev/null 2>&1; then
    _task "Installing OpenSSH"
    _cmd "sudo pacman -S --noconfirm openssh"
  fi

  _task "Setting Locale"
  _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

update_ansible_galaxy() {
  loading "Updating Ansible Galaxy" "ansible-galaxy install -r $DOTFILES_DIR/src/requirements/common.yml"
}

#########################################################
# MAIN
#########################################################

check_dependencies

tag_name="$1"
test -z "$tag_name" && tag_name='all'

os_name=$(grep "^NAME=" /etc/os-release | cut -d '=' -f2 | sed 's/"//g')

show_header
print_stats

case $os_name in
  Ubuntu)
    os_color="#E95420"
    ubuntu_setup
    ;;
  Arch)
    os_color="#1793D1"
    arch_setup
    ;;
  *)
    print_message "Unsupported OS"
    exit 1
    ;;
esac


# if ! [[ -d "$DOTFILES_DIR" ]] && [[ -f "$IS_FIRST_RUN" ]]; then
#   _task "Cloning repository"
#   _cmd "git clone --quiet "$DOTFILES_REPOSITORY" $DOTFILES_DIR"
# fi

# shellcheck disable=SC2069
pushd "$DOTFILES_DIR" 2>&1 > /dev/null
update_ansible_galaxy

print_message "Running playbook"
cd "${DOTFILES_DIR}/src" > /dev/null && ansible-playbook "main.yml" --tags "$tag_name"

# shellcheck disable=SC2069
popd 2>&1 > /dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  print_message "â˜¯ First run complete. Please reboot your computer"
  touch "$IS_FIRST_RUN"
fi