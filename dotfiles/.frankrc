
################################################################################
# [Descrição]:
#    Arquivo onde fica todos os meus alias, funções e configurações do shell
################################################################################

# Start TMUX
# [reference: https://wiki.archlinux.org/index.php/Tmux#Start_tmux_on_every_shell_login]
################################################################################
# if which tmux > /dev/null 2>&1; then
#     # if not inside a tmux session,
#     # and if no session is started, start a new session
#     # test -z "$TMUX" && (tmux attach || tmux new-session)
#     test -z "$TMUX" && tmux new-session
# fi

# set PATH
################################################################################

# colocando o ~/bin no $PATH
PATH=$PATH:$HOME/bin
PATH=$PATH:$HOME/.local/bin

# set default editor to vim
export EDITOR=vim

# Carregando arquivos
################################################################################

# carregando as cores
# o 'test' verifica se o arquivo existe
# o arquivo existindo, ele carrega o arquivo
# utilizando o '. $_'
# o '.' é sinonimo do comando "source"
# e o '$_' imprime o último argumento do último comando executado
test -e ~/.colors.sh && . $_

# carregando o .private_aliases
test -e ~/.localrc && . $_

# carregando o .git_prompt
test -e ~/.git_prompt && . $_

# Configurações
################################################################################
# seta o teclado pra pt-br
  setxkbmap -layout br

# variáveis para colorir manpages
export LESS_TERMCAP_mb=${bold_green}
export LESS_TERMCAP_md=${bold_green}
export LESS_TERMCAP_me=${text_reset}
export LESS_TERMCAP_se=${text_reset}
export LESS_TERMCAP_so=${bold_yellow}
export LESS_TERMCAP_ue=${text_reset}
export LESS_TERMCAP_us=${bold_red}

# exibindo data e hora no comando 'history'
export HISTTIMEFORMAT="%d/%m/%y %T "

# Alias Padrões
################################################################################
	# pra Linux
	if [ "Linux" = $(uname -s) ]; then
		alias ls='ls --color=auto'
		alias grep='grep --color=auto'
		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
	# pra Mac
	else
		export GREP_OPTIONS="--color=auto"
		export GREP_COLOR="4;33"
		export CLICOLOR="auto"

		alias ls="ls -G"
	fi

# Utilidades - Commons
################################################################################

  # Função pra imprimir informação
  function print_info(){
  	printf "${text_yellow}$1${text_reset}\n"
  }

  # Função pra imprimir mensagem de sucesso
  function print_success(){
  	printf "${text_green}$1${text_reset}\n"
  }

  # Função pra imprimir erros
  function print_error(){
  	printf "${text_red}[ERROR] $1${text_reset}\n"
  }

# Git Alias
################################################################################
# olhe: http://opensource.apple.com/source/Git/Git-19/src/git-htmldocs/pretty-formats.txt

  # <hash> <date> <user name> <commit message>
  alias gl='git log -n 20 --oneline --date=short --pretty=format:"%Cgreen%h%Creset %Cred%ad%Creset %Cblue% %aN%Creset %s"'

  # <hash> <date> <user email> <commit message>
  alias gle='git log -n 20 --oneline --date=short --pretty=format:"%Cgreen%h%Creset %Cred%ad%Creset %Cblue% %ae%Creset %s"'

  # pega o nome do repositório do git
	alias git_repository_name="git config --get --local remote.origin.url"

	# Deleta todas as branches locais, deixando só a current branch
	alias git_clean_branches="git branch | grep -v \"\*\" | xargs -n 1 git branch -D"

  # undo commit, and files back to the 'stage area'
  alias git_undo_commit="git reset HEAD~"

  # alias rápido para commitar e dargit push ao mesmo tempo
  function git_commit_push(){
    local commit_msg=$1

    if [ -n "$commit_msg" ];then
      local current_branch=$(git branch | grep "^*" | awk '{print $2}')

      git commit -a -m "$commit_msg"
      git push origin "$current_branch"
    else
      echo "digite a mensagem do commit"
      return 1
    fi
    
  }

  # troca a branch salvando no stash temporariamente
  function trocar_de_branch(){
    local branch=$1
    if [ ! -z "$branch" ];then
      git stash save \
      && git pull \
      && git checkout "$branch" \
      && git stash apply \
      && git stash clear
    else
      echo "passe o nome da branch por parametro"
      return 1
    fi
  }

# General Alias
################################################################################

  # Syntax-highlight JSON strings or files
  # Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
  function json() {
    if type jq > /dev/null 2>&1;then
    	jq '.'
    else
      echo "instalando o jq"
      sudo apt-get install -y jq
      echo "execute o comando novamente"
    fi
}

  # Clipboard
  # use: "echo mensagem | setclip"
  alias setclip='xclip -selection c'
  alias getclip='xclip -selection clipboard -o'

  # create key ssh to git repositories (like github, gitlab..)
  ssh_create_key(){
    local git_email=$(git config --global --includes user.email)
    if [ ! -z "$git_email" ];then
      ssh-keygen -t rsa -C "$git_email"
    fi
  }

  # get ssh key from file '~/.ssh/id_rsa.pub'
  ssh_get_key(){
    test -f ~/.ssh/id_rsa.pub && cat $_
  }

  # Função pra deletar os lock do apt-get.
  # Usado principalmente, quando ele trava do nada.
  apt-get-fix(){
    sudo rm /var/lib/apt/lists/lock
    sudo rm /var/cache/apt/archives/lock
    sudo rm /var/lib/dpkg/lock
    echo "OK"
  }

  # alias de navegação
  alias ..="cd .."
  alias cd..="cd .."
  alias back="cd -"

  # lista os alias de forma mais amigável
  alias aliases="alias | sed 's/=.*//'"

  # lista todas as funções de forma mais amigável
  alias functions="declare -f | grep '^[a-z].* ()' | sed 's/{$//'"

  # print $path mais amigável
  alias path='echo $PATH | tr ":" "\n" | sort'

  # print 'ls -lha' com formato de timestamp
  alias ll='ls -l --time-style=+"%d-%m-%Y %H:%M:%S" --color -h -a'

  # get folder size
  alias size='du -sh'

  # get and print folder size for all folders, recursively
  alias sizer='du -h -c'

	# troca para versões do java instalado no computador
	alias trocar_java='sudo update-alternatives --config java'

  # função para abrir o Disk Usage Analyzer (baobab)
	# caso não esteja instalado, dando erro ele instala pra mim
	# PARAM: o diretório que quer analizar
	function disk_analyser(){
		if type gksu > /dev/null 2>&1;then
			gksudo baobab $1 2> /dev/null
		else
			print_info "Instalando dependencias..."
			sudo apt-get install -y gksu
			clear
			print_info "Abrindo..."
			gksudo baobab $1 2> /dev/null
		fi
  }

	# limpa a lixeira
	function limpar_lixeira(){
		print_info "Limpando lixeira...."
		rm -rfv  ~/.local/share/Trash/*
		print_info "Lixeira vazia!"
	}

	# atualiza o computador e limpa os pacotes .deb
	# lá de '/var/cache/apt/archives/'
	function atualizar_computador(){
    print_info "Removendo pacotes não utilizados..."
    sudo apt autoremove -y

		print_info "Update..."
		sudo apt update

		print_info "Upgrade..."
    apt list --upgradable
		sudo apt upgrade -y
		sudo apt dist-upgrade -y

		print_info "Resolvendo pacotes quebrados..."
		sudo apt -f -y install

    print_info "limpando o repositório local..."
		sudo apt clean -y
	}

  # restartar o adb
  function adb_restart {
    adb kill-server
    sleep 2
    adb start-server
  }

  # função pra add job no cron programaticamente
  add_cronjob(){
    local comando=$1

    (crontab -l 2> /dev/null ; echo "$comando") \
    | sort - | uniq - | crontab -
  }

  # minha tag no logcat
  alias minha_tag='adb logcat -s "fcbj":v'
