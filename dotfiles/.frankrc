#  ██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
#  ██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
#  ██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
#  ██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
#  ██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
#  ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝


################################################################################
# [Descrição]:
#    Arquivo onde fica todos os meus alias, funções e configurações do shell
################################################################################

# Start TMUX
# [reference: https://wiki.archlinux.org/index.php/Tmux#Start_tmux_on_every_shell_login]
################################################################################
# if which tmux > /dev/null 2>&1; then
#     # if not inside a tmux session,
#     # and if no session is started, start a new session
#     # test -z "$TMUX" && (tmux attach || tmux new-session)
#     test -z "$TMUX" && tmux new-session
# fi

# set PATH
################################################################################

# colocando o ~/bin no $PATH
PATH=$PATH:$HOME/bin
PATH=$PATH:$HOME/.local/bin

# set default editor to vim
export EDITOR=vim

# exibindo sysinfo e system logo com o neofetch
if which neofetch > /dev/null 2>&1 ;then
  neofetch
fi

# Carregando arquivos
################################################################################

# carregando as cores
# o 'test' verifica se o arquivo existe
# o arquivo existindo, ele carrega o arquivo
# utilizando o '. $_'
# o '.' é sinonimo do comando "source"
# e o '$_' imprime o último argumento do último comando executado
test -e ~/.colors.sh && . $_

# carregando o .private_aliases
test -e ~/.localrc && . $_

# carregando o .git_prompt
test -e ~/.git_prompt && . $_

# Configurações
################################################################################
# seta o teclado pra pt-br
  setxkbmap -layout br

# variáveis para colorir manpages
export LESS_TERMCAP_mb=${bold_green}
export LESS_TERMCAP_md=${bold_green}
export LESS_TERMCAP_me=${text_reset}
export LESS_TERMCAP_se=${text_reset}
export LESS_TERMCAP_so=${bold_yellow}
export LESS_TERMCAP_ue=${text_reset}
export LESS_TERMCAP_us=${bold_red}

# exibindo data e hora no comando 'history'
export HISTTIMEFORMAT="%d/%m/%y %T "

# Alias Padrões
################################################################################
	# pra Linux
	if [ "Linux" = $(uname -s) ]; then
		alias ls='ls -h --color=auto --group-directories-first'
		alias grep='grep --color=auto'
		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
	# pra Mac
	else
		export GREP_OPTIONS="--color=auto"
		export GREP_COLOR="4;33"
		export CLICOLOR="auto"

		alias ls="ls -G"
	fi

# Utilidades - Commons
################################################################################

  # Função pra imprimir informação
  function print_info(){
  	printf "${text_yellow}$1${text_reset}\n"
  }

  # Função pra imprimir mensagem de sucesso
  function print_success(){
  	printf "${text_green}$1${text_reset}\n"
  }

  # Função pra imprimir erros
  function print_error(){
  	printf "${text_red}[ERROR] $1${text_reset}\n"
  }

# Git Alias
################################################################################
# olhe: http://opensource.apple.com/source/Git/Git-19/src/git-htmldocs/pretty-formats.txt

  # <hash> <date> <user name> <commit message>
  alias gl='git log -n 20 --oneline --date=short --pretty=format:"%Cgreen%h%Creset %Cred%ad%Creset %Cblue% %aN%Creset %s"'

  # <hash> <date> <user email> <commit message>
  alias gle='git log -n 20 --oneline --date=short --pretty=format:"%Cgreen%h%Creset %Cred%ad%Creset %Cblue% %ae%Creset %s"'

  # imprime apenas o ultimo commit
  alias git_last_commit="git log -1 HEAD"

  # desfaz as alteração do stage
  alias git_unstage="git reset HEAD"

  # pega o nome do repositório do git
	alias git_repository_name="git config --get --local remote.origin.url"

	# Deleta todas as branches locais, deixando só a current branch
	alias git_clean_branches="git branch | grep -v \"\*\" | xargs -n 1 git branch -D"

  # undo commit, and files back to the 'stage area'
  alias git_undo_commit="git reset --soft HEAD^"

  # remove all untracked files, is case of you want to clean in repo.
  alias git_remove_untracked_files="git clean -df"

  # Função pra encurtar URLs do github
  function github_shorten_url(){
    local url="$1"
    local code="$2"
    test -z "$url" && echo "digite a URL que você quer encurtar" && return 1
    test -z "$code" && echo "digite o nome customizado da URL" && return 1
    curl --silent https://git.io/ -i -F "url=$url" -F "code=$code" | grep "Location" | awk '{print $2}'
  }

  # alias rápido para commitar e dar git push ao mesmo tempo
  function git_commit_push(){
    local commit_msg=$1

    if [ -n "$commit_msg" ];then
      local current_branch=$(git branch | grep "^*" | awk '{print $2}')

      git commit -a -m "$commit_msg"

      local has_conflict=$(git_verify_conflict)
      # se o $has_conflict for nulo, não teve conflito
      if [ -z "$has_conflict" ];then
        git pull
        git push origin "$current_branch"
      else
        printf "$has_conflict"
        return 1
      fi

    else
      echo "digite a mensagem do commit"
      return 1
    fi
    
  }

  # verifica se tem conflito com o remote
  function git_verify_conflict(){
    #  verificando se é um diretorio git
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1;then
      local current_branch=$(git branch | grep "^*" | awk '{print $2}')

      git fetch > /dev/null 2>&1
      # faz um merge sem commit e salva nesse arquivo temporário
      git merge origin/${current_branch} --no-commit --no-ff > .conflict.txt 2>&1
      if grep -q "CONFLICT" .conflict.txt;then
          local conflict_file=$(grep "CONFLICT" .conflict.txt | awk '{print $6}')
          # caso tenha conflito, formata a mensagem bonitinha
          echo
          echo "============ CONFLICT ============"
          printf "${text_red}CONFLICT${text_reset} in ${text_yellow}${conflict_file}${text_reset}\n"
          echo "=================================="
          echo
      fi
      local git_root_directory=$(git rev-parse --show-toplevel)
      #  verificação para saber se existe merge a ser abortado
      if [ $(find $git_root_directory -iname "MERGE_HEAD" | wc -l) != "0" ];then
        # aborta o merge, e deleta o arquivo temporário
        git merge --abort
      fi
      test -f .conflict.txt && rm -rf $_
    fi
  }

  # troca a branch salvando no stash temporariamente
  function trocar_de_branch(){
    local branch=$1
    local repository_name=$(git config --get --local remote.origin.url)

    # verificando se a branch foi passada por parametro
    if [ ! -z "$branch" ];then
      # verificando se a branch existe
      local branch_exist=$(git ls-remote --heads "$repository_name" "$branch")
      if [ -z "$branch_exist" ];then
        echo "branch não existe no repositório"
        return 1
      fi

      git stash save \
      && git pull \
      && git checkout "$branch" \
      && git stash apply \
      && git stash clear
    else
      echo "passe o nome da branch por parametro"
      return 1
    fi    
  }

# General Alias
################################################################################

  # cria rapidamente um script novo
  function fast_script(){
    local filename="$1"
    if [ -z "$filename" ];then
      echo "digite o nome do script"
      return 1
    fi

    echo '#!/bin/bash' > "${filename}.sh"
    chmod +x "${filename}.sh"
    code -n "${filename}.sh"
  }

  # Syntax-highlight JSON strings or files
  # Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
  function json() {
    if type jq > /dev/null 2>&1;then
    	jq '.' $*
    else
      echo "instalando o jq"
      sudo apt-get install -y jq
      echo "execute o comando novamente"
    fi
  }

  # Clipboard
  # use: "echo mensagem | copiar"
  # OBS: 'xclip' não vem instalado por padrão no SO.
  alias copiar='xclip -selection c'
  alias colar='xclip -selection clipboard -o'

  alias bat='docker run -it --rm -e BAT_THEME -e BAT_STYLE -e BAT_TABS -v "$(pwd):/myapp" danlynn/bat'
  # Ref: https://github.com/SeraphyBR/DotFiles/blob/master/.zshrc
  # alias para ler um arquivo ou acessar um diretório.
  # OBS: o comando "bat" não vem instalado por padrão.
  function arquivo() {
    local parametro="$1"
    local file_type=$(file -i "$parametro" | awk '{print $2}' | grep "text")
    if [ $# -eq 0 ];then
        clear
    elif [ -d "$parametro" ];then
        cd "$parametro"
    elif [ ! -z "$file_type" ];then
      bat "$parametro"
    fi
}

# Ref: https://github.com/paulmillr/dotfiles/blob/master/home/.zshrc.sh
# Find files and exec commands at them.
# $ find-exec .coffee cat | wc -l
# # => 9762
function find-exec() {
  find . -type f -iname "*${1:-}*" -exec "${2:-file}" '{}' \;
}

# Alias para criar um novo diretório e entrar nele, logo na sequencia
function new_dir(){
  test -z $1 && echo "passe o nome do novo diretorio por parametro" && return 1
  mkdir -p "$@" && cd "$@"
}

  # Ref: https://github.com/paulmillr/dotfiles/blob/master/home/.zshrc.sh
  # alias pra pegar o clima
  alias clima='curl pt.wttr.in'

  # create key ssh to git repositories (like github, gitlab..)
  alias ssh_create_key='ssh-keygen -t rsa'

  # alias pra recarregar o bashrc
  alias refresh_bash='source ~/.bashrc > /dev/null && echo "bash refreshed"'

  # get ssh key from file '~/.ssh/id_rsa.pub'
  ssh_get_key(){
    test -f ~/.ssh/id_rsa.pub && cat $_
  }

  # Função pra deletar os lock do apt-get.
  # Usado principalmente, quando ele trava do nada.
  # Além de reconfigurar o dpkg e resolver os pacotes quebrados
  apt-get_fix(){
    sudo rm -rf /var/lib/apt/lists/lock
    sudo rm -rf /var/cache/apt/archives/lock
    sudo rm -rf /var/lib/dpkg/lock
    sudo rm -rf /var/lib/dpkg/lock-frontend
    sudo apt --fix-broken install
    sudo dpkg --configure -a
    echo "OK"
  }

  # alias de navegação
  alias ..="cd .."
  alias cd..="cd .."
  alias back="cd -"

  # lista os alias de forma mais amigável
  alias aliases="alias | sed 's/=.*//'"

  # lista todas as funções de forma mais amigável
  alias functions="declare -f | grep '^[a-z].* ()' | sed 's/{$//'"

  # print $path mais amigável
  alias path='echo $PATH | tr ":" "\n" | sort'

  # print 'ls -lha' com formato de timestamp
  alias ll='ls -l --time-style=+"%d-%m-%Y %H:%M:%S" --color -h -a'

  # get folder size
  alias size='du -sh'

  # get and print folder size for all folders, recursively
  alias sizer='du -h -c'

	# troca para versões do java instalado no computador
	alias trocar_java='sudo update-alternatives --config java'

  # função para abrir o Disk Usage Analyzer (baobab)
	# caso não esteja instalado, dando erro ele instala pra mim
	# PARAM: o diretório que quer analizar
	function disk_analyser(){
		if type gksu > /dev/null 2>&1;then
			gksudo baobab $1 2> /dev/null
		else
			print_info "Instalando dependencias..."
			sudo apt-get install -y gksu
			clear
			print_info "Abrindo..."
			gksudo baobab $1 2> /dev/null
		fi
  }

	# limpa a lixeira
	function limpar_lixeira(){
		print_info "Limpando lixeira...."
		rm -rfv  ~/.local/share/Trash/*
		print_info "Lixeira vazia!"
	}

	# atualiza o computador e limpa os pacotes .deb
	# lá de '/var/cache/apt/archives/'
	function atualizar_computador(){
		print_info "Update..."
		sudo apt update

		print_info "Upgrade..."
		sudo apt upgrade -y
		sudo apt dist-upgrade -y

		print_info "Resolvendo pacotes quebrados..."
		sudo apt -f -y install

    print_info "limpando o repositório local..."
    sudo apt autoremove -y
    sudo apt autoclean -y
		sudo apt clean -y
	}

  # restartar o adb
  function adb_restart {
    adb kill-server
    sleep 2
    adb start-server
  }

  # função pra add job no cron programaticamente
  function add_cronjob(){
    local comando=$1

    (crontab -l 2> /dev/null ; echo "$comando") \
    | sort - | uniq - | crontab -
  }

  # Comando para matar um processo de forma mais fácil.
  function pskill(){
    local process_name=$1

    if [ -z "$process_name" ];then
      echo "insert process name as parameter"
      return 1
    fi

    local pid=$(ps -ax | grep $process_name | grep -v grep | awk '{ print $1 }')
    echo -n "killing $process_name..."
    kill -9 $pid
    echo "process $pid"
    echo "$process_name morto!"
  }

  # alias do youtube-dl apontando para imagem do docker
  alias youtube-dl='docker run --rm -u $(id -u):$(id -g) -v $PWD:/data vimagick/youtube-dl'
  # download video do youtube
  alias youtube_download="youtube-dl --add-metadata -i -o '%(upload_date)s-%(title)s.%(ext)s'"
  # download apenas o audio do vídeo do youtube em mp3
  alias youtube_download_audio="youtube-dl --add-metadata --audio-format 'mp3' -xic -o '%(title)s.%(ext)s'"
